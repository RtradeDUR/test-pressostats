import streamlit as st
import pandas as pd
import os

st.set_page_config(page_title="Test Pressostats", layout="centered")
st.title("Formulaire de Test - Pressostats Ã  Membrane")

csv_file = "tests_pressostats.csv"

# Chargement sÃ©curisÃ© des donnÃ©es
if "data" not in st.session_state:
    if os.path.exists(csv_file) and os.path.getsize(csv_file) > 0:
        try:
            df_loaded = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
            st.session_state.data = df_loaded.to_dict(orient="records")
        except pd.errors.EmptyDataError:
            st.warning("Le fichier CSV est vide ou corrompu. Il sera rÃ©initialisÃ©.")
            st.session_state.data = []
    else:
        st.session_state.data = []

# Formulaire dâ€™entrÃ©e
with st.form("formulaire_test"):
    col1, col2 = st.columns(2)
    with col1:
        id = st.text_input("NumÃ©ro Pressostat")
        date = st.date_input("Date de test")
        testeur = st.text_input("TestÃ© par")
        declenchement = st.number_input("Pression en montÃ©e (bar)", step=0.01)
        retour = st.number_input("Pression en descente (bar)", step=0.01)
        hysteresis = st.number_input("HystÃ©rÃ©sis (bar)", step=0.01)
        resultat = st.selectbox("RÃ©sultat du test", ["Conforme", "Non conforme"])
    with col2:
        modele = st.text_input("DÃ©signation ModÃ¨le")
        visuel = st.selectbox("Ã‰tat visuel", ["OK", "DÃ©faut"])
        fuite = st.selectbox("Fuite dÃ©tectÃ©e", ["Non", "Oui"])
        stabilite = st.selectbox("StabilitÃ© sur 5 cycles", ["Stable", "Instable"])
        prochain = st.date_input("Prochain test (si applicable)")
        val_hysteresis = st.selectbox("Valeur HystÃ©rÃ©sis", ["Conforme", "Non conforme"])
        commentaires = st.text_input("Commentaires")

    submit = st.form_submit_button("âœ… Enregistrer")

    if submit:
        new_data = {
            "NumÃ©ro Pressostat": id,
            "ModÃ¨le": modele,
            "Date": str(date),
            "TestÃ© par": testeur,
            "Pression en montÃ©e (bar)": declenchement,
            "Pression en descente (bar)": retour,
            "HystÃ©rÃ©sis": hysteresis,
            "Valeur HystÃ©rÃ©sis": val_hysteresis,
            "Visuel": visuel,
            "Fuite": fuite,
            "StabilitÃ©": stabilite,
            "Prochain test": str(prochain),
            "RÃ©sultat": resultat,
            "Commentaires": commentaires
        }

        st.session_state.data.append(new_data)
        df_to_save = pd.DataFrame(st.session_state.data)
        df_to_save.to_csv(csv_file, index=False, sep=';', encoding='utf-8-sig')
        st.success("Test enregistrÃ© avec succÃ¨s.")

# Affichage et gestion
if st.session_state.data:
    df = pd.DataFrame(st.session_state.data)
    st.markdown("### ğŸ“‹ Tests enregistrÃ©s")
    st.markdown("### ğŸ—‘ Supprimer un test individuellement")

    for i, row in df.iterrows():
        col1, col2 = st.columns([8, 1])
        with col1:
            st.write(f"**{row['NumÃ©ro Pressostat']}** - {row['Date']} - {row['RÃ©sultat']}")
        with col2:
            if st.button("ğŸ—‘", key=f"delete_{i}"):
                st.session_state.data.pop(i)
                df_after = pd.DataFrame(st.session_state.data)
                df_after.to_csv(csv_file, index=False, sep=';', encoding='utf-8-sig')
                st.rerun()

    st.dataframe(df, use_container_width=True)

    csv = df.to_csv(index=False, sep=';', encoding="utf-8-sig").encode("utf-8-sig")
    st.download_button("ğŸ“¥ TÃ©lÃ©charger le fichier CSV", csv, "tests_pressostats.csv", "text/csv")

    if st.button("ğŸ—‘ Effacer tous les tests"):
        st.session_state.data = []
        if os.path.exists(csv_file):
            os.remove(csv_file)
        st.rerun()